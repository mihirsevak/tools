#!/bin/bash
# ======================================================================================
# USAGE:
#
#    Lets say you have proj1, proj2, proj3 and proj4 in your current directory and you
#    want to seach all but proj3 for a file called fileoutput.c then you use
#
#    exfind . -v proj3 -name 'fileoutput.c'
#
#    If the same situation is there in your workplace folder then also it works.
#
#    exfind workspace -v proj3 -iname 'fileoutput.c'
#
#######################################################################################
#    In case you have multiple directories you want to exclude from search use a list
#    of directories in double quotes as shown below.
#
#    exfind .  -v " music instrumenter scripts" -iname *.cpp
#=======================================================================================


DIRECTORY=""
if [[ "$2" = "-v" ]]; then
	#echo "exclusion found"
	DIRECTORY=$3
fi

if [[ ${DIRECTORY} != "" ]]; then
	WORDS=$(echo $DIRECTORY | wc -w )
	if [[ $WORDS -gt 1 ]]; then
		DIRECTORY=$(echo $DIRECTORY | xargs)
		DIRLIST=$(echo ${DIRECTORY// / -e })	
	else
		DIRLIST=$DIRECTORY
	fi

	#echo $DIRLIST 
	SEARCHPATH=$(ls -1d $1/*/ 2> /dev/null | grep -v -e ${DIRLIST} | tr '\n\r' ' ' | sed 's/ $/\n/' )	
	#echo $SEARCHPATH
	shift 3
	DEFAULT="$@"
	#echo $DEFAULT
else 
	SEARCHPATH=$2
	find $@
	exit 0
fi

#echo "EXCLUDE DIRECTORY  = ${DIRECTORY}"
#echo "SEARCH PATH     = ${SEARCHPATH}"
#echo "DEFAULT         = ${DEFAULT}"

#if [[ -n $1 ]]; then
#    echo "Last line of file specified as non-opt/last argument:"
#    tail -1 "$1"
#fi


#echo "FIND COMMAND: find $SEARCHPATH $DEFAULT"
find $SEARCHPATH $DEFAULT
#find "$@"
